using System;
using System.Data.SqlClient;

static class IO {
    static private bool DEBUG = true;

    static public void Print(string what, ConsoleColor color = ConsoleColor.Black, bool newLine = true) {
        if (!DEBUG) return; // Don't do anything

        Console.ForegroundColor = color;
        Console.Write(what);

        if (newLine) Console.Write("\n");

        Console.ResetColor();
    }

    /* This method prompts WHAT and gets the input from Console*/
    static public string GetString(string what = "") {
        IO.Print(what, ConsoleColor.Yellow, false);
        var input = Console.ReadLine();
        return input;
    }
}

class Account {
    public int       Id          { get; set; }
    public string    Acc         { get; set; } public int       Is_Active   { get; set; } public DateTime  Created_At  { get; set; }
    public DateTime? Updated_At  { get; set; } // This can be null

    // Default constructor
    public Account() { }

    public Account(string acc, int is_active, DateTime created_at) {
        Acc = acc;
        Is_Active = is_active;
        Created_At = created_at;
        IO.Print("Created new account.", ConsoleColor.Green);
    }

    class Transaction { 
        public int      Id           { get; set; }
        public int      Account_Id   { get; set; }
        public decimal  Amount       { get; set; }
        public DateTime Created_At   { get; set; }
    }

    class Program {
        static void CreateAccount(SqlConnection cnn) {
            var curAcc = new Account(IO.GetString("Input Account number in xxxxx format: "), 1, DateTime.Now);

            /* TODO: Create a try catch for opening the sql connection */
            cnn.Open();

            try {
                var command = cnn.CreateCommand();
                /* The command to execute */
                command.CommandText = "INSERT INTO [dbo].[Accoutn]([Account], [Is_Active], [Created_At]) VALUES (@Acc, @IsActive, @Created_At)";
                command.Parameters.AddWithValue("@Acc", curAcc.Acc);
                command.Parameters.AddWithValue("@IsActive", curAcc.Is_Active);
                command.Parameters.AddWithValue("@Created_At", curAcc.Created_At);
                var res = command.ExecuteNonQuery();
                if (res <= 0) throw new Exception("The account was not created !");
                /* If OK print this ...*/
                IO.Print($"Account {curAcc.Acc} created successfully !", ConsoleColor.Green);
            } catch (Exception ex) {
                IO.Print(ex.Message);
                IO.Print("Cannot create account !", ConsoleColor.Red);
            } finally {
                /* Close the connection in every case */
                cnn.Close();
            }
        }
        static void ShowAccounts() {

        }
        static void Transfer(string from, string to, decimal amount) {

        }

        static void Main() {
            /* Initializing SQL Connection */
            IO.Print("Starting SQL connection ...", ConsoleColor.Yellow);
            var builder = new SqlConnectionStringBuilder();

            /* Change these to your needs */
            builder.DataSource = "localhost";
            builder.UserID = "sa";
            builder.Password = "qwerty112!";
            builder.InitialCatalog = "DZ";

            var cnn = new SqlConnection(builder.ToString());

            /* Testing system */
            bool running = true;
            while (running) {
                Console.Clear();

                /* Get user choice */
                IO.Print("1. Create Account; 2. Show Accounts; 3. Transfer");
                var cmd = IO.GetString("->: ");

                switch (cmd) {
                    case "1":
                        CreateAccount(cnn);
                        break;
                    case "2":
                        break;
                    case "3":
                        break;
                    case "4":
                        break;
                    default:
                        running = false;
                        break;
                }
            }
        }
    }
}
